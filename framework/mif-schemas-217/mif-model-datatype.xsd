<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id: -->
<xs:schema xmlns="urn:hl7-org:v3/mif2" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:sch="http://www.ascc.net/xml/schematron" targetNamespace="urn:hl7-org:v3/mif2" elementFormDefault="qualified">
  <xs:annotation>
    <xs:documentation>
********************************************************************************
Author: Initial development by Lloyd McKenzie, Dec. 2002
(c) 2002-2008 by HL7 Inc.

Purpose:
	Provides a format for defining datatypes and their properties.

Programatic rules (rules that apply but are not schema or schematron-enforced):
  - All datatypes referenced in a DatatypeDefinition must exist in the datatype model, or in one of the models in the inheritance hierarcy.
  - There can't be any duplicates of datatype name or formalName within a DatatypeModelLibrary or any of the models in the inheritance hierarchy

Todo: Outstanding questions:
  - What constraints should there be on datatypeModelLibrary.modelId?
********************************************************************************
		</xs:documentation>
  </xs:annotation>
  <xs:include schemaLocation="mif-core-staticBase.xsd"/>
  <xs:element name="datatypeModelLibrary" type="GlobalDatatypeModelLibrary">
    <xs:annotation>
      <xs:documentation>A datatype model</xs:documentation>
      <xs:documentation>UML: A Package with a DatatypeModel stereotype</xs:documentation>
      <xs:appinfo>
        <sch:pattern name="Validate datatypeModel element">
          <sch:rule context="mif:datatypeModel">
            <sch:extends rule="DatatypeModel"/>
          </sch:rule>
        </sch:pattern>
      </xs:appinfo>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="GlobalDatatypeModelLibrary">
    <xs:annotation>
      <xs:documentation>Extends datatype model library for use as a stand-alone XML document</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DatatypeModelLibrary">
        <xs:attributeGroup ref="SchemaVersion"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="DatatypeModelLibrary">
    <xs:annotation>
      <xs:documentation>A container for datatype definitions</xs:documentation>
      <xs:documentation>UML: DatatypeModelLibrary stereotype.</xs:documentation>
      <xs:appinfo>
        <sch:pattern name="Validate DatatypeModel type">
          <sch:rule abstract="true" id="DatatypeModelLibrary">
            <sch:extends rule="Package"/>
          </sch:rule>
        </sch:pattern>
      </xs:appinfo>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="Package">
        <xs:sequence>
          <!--          <xs:element name="derivedFrom" type="PackageDerivation" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>Identifies the package(s) from which the current package was derived.</xs:documentation>
              <xs:documentation>UML: supplier association from ModelElement to Derivation stereotype on Dependency</xs:documentation>
            </xs:annotation>
          </xs:element>-->
          <xs:element name="importedVocabularyModelPackage" type="PackageRef" minOccurs="0">
            <xs:annotation>
              <xs:documentation>The vocabulary model that is used by this model</xs:documentation>
              <xs:documentation>UML: A package that is imported into the current data model</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="importDatatypeModelLibrary" type="ImportDatatypeModelLibrary" minOccurs="0">
            <xs:annotation>
              <xs:documentation>Identifies any datatype model that is extended by the current model.  This would be used for "local" datatype models that add additional datatype flavors.  If no specific datatypes are referred to, then all are imported, otherwise only those listed are imported</xs:documentation>
              <xs:documentation>UML: supplier association to Import stereotype of a Permission dependency to another DatatypeModelLibrary</xs:documentation>
              <!-- To do: if you're importing a datatype model, all you can do is define flavors, not definitional datatypes -->
            </xs:annotation>
          </xs:element>
          <xs:element name="importAnnotationLibrary" type="PackageRef" minOccurs="0">
            <xs:annotation>
              <xs:documentation>Identifies the annotation library that is used to supplement the annotations defined in this model.  Annotations in this model with no 'cascade' information take precedence over annotations defined in the annoation library</xs:documentation>
              <xs:documentation>UML: AnnotationLibrary package that is imported into the model package</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="datatype" type="Datatype" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>Lists all of the datatypes defined in the current model.</xs:documentation>
              <xs:documentation>UML: The ownedElement relationship to the DatatypeDefinitions in the package</xs:documentation>
              <xs:appinfo>
                <sch:pattern name="Validate datatype element">
                  <sch:rule context="mif:datatype">
                    <sch:extends rule="Datatype"/>
                  </sch:rule>
                </sch:pattern>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
      <!-- Todo: Add annotations, particularly 'appendix' -->
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="ImportDatatypeModelLibrary">
    <xs:annotation>
      <xs:documentation>Identifies the DatatypeModelLibrary package being imported, as well as identifying all datatypes that are to be publicly exposed from the imported model.  (Default is 'private' exposure for those datatypes not explicitly mentioned.)</xs:documentation>
      <xs:documentation>UML: Represents a combination of the Import stereotype to another DatatypeModelLibrary (via the packageref), as well as the ElementImport association to each imported datatype</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ArtifactDependency">
        <xs:sequence>
          <xs:element name="importedDatatype" type="DatatypeImport" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>Identifies those datatypes that should be 'exposed' in the current datatype model.  Exposed datatypes will be usable as attribute datatypes.  All datatypes will be accessible for 'refinement'.  If no filter is specified, then all datatypes are available with the same access as they were in the imported specification</xs:documentation>
              <xs:documentation>UML: The ElementImport association to each datatype being imported</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="DatatypeImport">
    <xs:annotation>
      <xs:documentation>UML: Corresponds to ElementImport class association pointing to an imported datatype</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DatatypeRef">
        <xs:attribute name="visibility" type="VisibilityKind" use="optional" default="public">
          <xs:annotation>
            <xs:documentation>Indicates what type of visibility the imported datatype should have.  If private, it will not be exposed to imports of this datatype model.  If Protected, it will not be referencable in a static model.</xs:documentation>
            <xs:documentation>UML: ElementImport.visibility</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="alias" type="DatatypeName" use="optional">
          <xs:annotation>
            <xs:documentation>Indicates the name by which the imported datatype should be referenced when referred to in the importing model.</xs:documentation>
            <xs:documentation>UML: ElementImport.alias</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="Datatype">
    <xs:annotation>
      <xs:documentation>The definition of a structure for transmitting and persisting fundamental concepts within a model.</xs:documentation>
      <xs:documentation>UML: DatatypeDefinition stereotype</xs:documentation>
      <xs:appinfo>
        <sch:pattern name="Validate Datatype type">
          <sch:rule abstract="true" id="Datatype">
            <sch:report test="count(preceding::mif:*[name(.)=name(current())][@name=current()/@name][count(mif:parameter[@name=current()/mif:parameter/@name])=count(mif:parameter)])!=0">
							ERROR: There must not be more than one datatype definition having the same name and parameters.</sch:report>
            <sch:report test="ancestor::mif:datatypeModelLibrary//*[name(.)=name(current())][@name=current()/@name]&gt;1">
							ERROR: There cannot be more than one datatype with the same name.</sch:report>
          </sch:rule>
        </sch:pattern>
      </xs:appinfo>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="Classifier">
        <xs:sequence>
          <xs:element name="derivedFrom" type="DatatypeDerivation" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>Identifies the datatype(s) from which the current datatype was derived.</xs:documentation>
              <xs:documentation>UML: supplier association from ModelElement to Derivation stereotype on Dependency</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="hasDerivations" type="DatatypeDerivation" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>Identifies the datatype(s) derived from the current datatype.</xs:documentation>
              <xs:documentation>UML: client association from ModelElement to Derivation stereotype on Dependency</xs:documentation>
              <xs:documentation>Derive: All datatypes which have the current datatype as a 'derivedFrom'</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="annotations" type="DatatypeAnnotations" minOccurs="0">
            <xs:annotation>
              <xs:documentation>Descriptive information about the containing element.</xs:documentation>
              <xs:documentation>UML: A collector for the comments and constraints associated with a model element.  (Consider rendering the definition or description annotation into ModelElement.documentation)</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="enumerationValue" type="ShortDescriptiveName" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>Indicates one of the allowed values for the datatype.  If enumerationValues are specified, the value of the attribute must match one of the specified enumerationValues.  If there is only one enumerationValue, then the property has a fixed value.</xs:documentation>
              <xs:documentation>UML: EnumerationLiteral (sort of - we have a datatype in addition to the enumerationValues)</xs:documentation>
              <!-- Todo - Constraint to only be allowed for 'simple' datatypes, prevent duplicate enumerationValues
                   Todo - Constraint that if present, there must be at least 2
                   Todo - Ensure that if there's an enumerationValue present, fixedValue is present -->
            </xs:annotation>
          </xs:element>
          <xs:element name="parameter" type="DatatypeParameter" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>Identifies a parameter for a datatype that is a template</xs:documentation>
              <xs:documentation>UML: Template.parameter</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="binding" type="DatatypeBinding" minOccurs="0">
            <xs:annotation>
              <xs:documentation>Where a datatype is of type "binding", indicates the parameterized datatype being bound and the datatype it is being bound to.</xs:documentation>
              <xs:documentation>UML: Indicates the supplier binding dependency for the datatype</xs:documentation>
            </xs:annotation>
          </xs:element>
          <!--          <xs:element name="containedDatatype" type="Datatype" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>A datatype defined to exist only within the context of it's parent datatype.  (Generally used for protected or private types.)</xs:documentation>
              <xs:documentation>UML: Classifiers can 'own' other classifiers because they descend from package.  Datatype prohibits this in 1.4, so we'll use a Class underlying the stereotype where we want to do this instead of a </xs:documentation>
              <xs:appinfo>
                <sch:pattern name="Validate ownedDatatype element">
                  <sch:rule context="mif:ownedDatatype">
                    <sch:extends rule="Datatype"/>
                  </sch:rule>
                </sch:pattern>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>-->
          <xs:element name="childDatatype" type="DatatypeRef" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>Used when an abstract datatype is a "choice" of multiple specific datatypes.</xs:documentation>
              <xs:documentation>UML: Walking the Generalization of the Datatype Classifier</xs:documentation>
            </xs:annotation>
            <!-- Todo: Only allow childDatatypes if parent is abstract -->
          </xs:element>
          <xs:element name="parentDatatype" type="DatatypeRef" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>Indicates any "choice" datatypes which list the current datatype as an available choice.</xs:documentation>
              <xs:documentation>UML: Walking the Specialization of the Datatype Classifier</xs:documentation>
              <xs:documentation>Derive: All datatypes which have this datatype as childDatatype</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="property" type="DatatypeOperation" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>A capability of a datatype.</xs:documentation>
              <xs:documentation>UML: feature association to a DatatypeOperation stereotype</xs:documentation>
              <xs:appinfo>
                <sch:pattern name="Validate operation element">
                  <sch:rule context="mif:operation">
                    <sch:extends rule="DatatypeOperation"/>
                  </sch:rule>
                </sch:pattern>
              </xs:appinfo>
            </xs:annotation>
            <xs:unique name="parameterNameUniqueInProperty">
              <xs:selector xpath="parameter"/>
              <xs:field xpath="@name"/>
            </xs:unique>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="name" type="DatatypeName" use="required">
          <xs:annotation>
            <xs:documentation>The formal identifier associated with the datatype.</xs:documentation>
            <xs:documentation>UML: inherited from modelElement.name</xs:documentation>
          </xs:annotation>
          <!-- Todo: Enforce that underscores are only allowed if it has a kind of "binding" -->
        </xs:attribute>
        <xs:attributeGroup ref="GeneralizableElement"/>
        <xs:attribute name="title" type="BasicFormalName" use="required">
          <xs:annotation>
            <xs:documentation>The descriptive name associated with the datatype.</xs:documentation>
            <xs:documentation>UML: title tag on Datatype stereotype</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="visibility" type="VisibilityKind" use="required">
          <xs:annotation>
            <xs:documentation>Identifies the amount of exposure the datatype has.</xs:documentation>
            <xs:documentation>UML: Inherits from modelElement.visibility.  Restricted to private, protected or public.  ('Package' is not allowed)</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="datatypeKind" type="DatatypeKind" use="required">
          <xs:annotation>
            <xs:documentation>Allows distinguishing datatype 'definitions' from 'flavors'</xs:documentation>
            <xs:documentation>UML: Stereotype on datatype</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="DatatypeBinding">
    <xs:annotation>
      <xs:documentation>Identifies the parameterized datatype being 'instantiated', as well as the types to use for each parameter</xs:documentation>
      <xs:documentation>UML: The binding dependency that links to the datatype that the current datatype binds to</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="targetDatatype" type="DatatypeRef">
        <xs:annotation>
          <xs:documentation>The template datatype that this definition 'instantiates'</xs:documentation>
          <xs:documentation>UML: Datatype that is the target of the binding dependency</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="argumentDatatype" type="DatatypeRef" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>A parameter bound to the template datatype that this definition 'instantiates'</xs:documentation>
          <xs:documentation>UML: Datatype that is the argument model element for the binding dependency</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DatatypeAnnotations">
    <xs:annotation>
      <xs:documentation>Comments relating to the datatype model</xs:documentation>
      <xs:documentation>UML: A collector for the comments and constraints associated with a Datatype.  (Consider rendering the definition or description annotation into ModelElement.documentation)</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="Annotations">
        <xs:sequence>
          <xs:element name="documentation" type="DatatypeDocumentation" minOccurs="0">
            <xs:annotation>
              <xs:documentation>Documentation related to the model element</xs:documentation>
              <xs:documentation>UML: Component of the Annotation object</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="appInfo" type="DatatypeAppInfo" minOccurs="0">
            <xs:annotation>
              <xs:documentation>Supporting programmatic information related to the model element which has descriptive componenents</xs:documentation>
              <xs:documentation>UML: Component of the Annotation object</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="DatatypeDocumentation">
    <xs:annotation>
      <xs:documentation>Simple comments relating to the datatype model</xs:documentation>
      <xs:documentation>UML: A collector for the comments and constraints associated with a Datatype.  (Consider rendering the definition or description annotation into ModelElement.documentation)</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="Documentation">
        <xs:sequence>
          <xs:group ref="Definition" minOccurs="0"/>
          <xs:group ref="UsageConstraint" minOccurs="0"/>
          <xs:group ref="UsageNotes" minOccurs="0"/>
          <xs:group ref="Rationale" minOccurs="0"/>
          <xs:group ref="Requirements" minOccurs="0"/>
          <xs:group ref="DesignComment" minOccurs="0"/>
          <xs:group ref="StabilityRemarks" minOccurs="0"/>
          <xs:group ref="OtherAnnotation" minOccurs="0"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="DatatypeAppInfo">
    <xs:annotation>
      <xs:documentation>Complex comments relating to the datatype model</xs:documentation>
      <xs:documentation>UML: A collector for 'complex' commments associated with a model element.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="AppInfo">
        <xs:sequence>
          <xs:group ref="Mapping" minOccurs="0"/>
          <xs:group ref="FormalConstraint" minOccurs="0"/>
          <xs:group ref="OpenIssue" minOccurs="0"/>
          <xs:group ref="StaticExample" minOccurs="0"/>
          <xs:group ref="BallotComment" minOccurs="0"/>
          <xs:group ref="ChangeRequest" minOccurs="0"/>
          <xs:group ref="DeprecationInfo" minOccurs="0"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="DatatypeDerivation">
    <xs:annotation>
      <xs:documentation>UML: A derivation dependency to another datatype</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="Derivation">
        <xs:sequence>
          <xs:element name="targetDatatype" type="DatatypeRef">
            <xs:annotation>
              <xs:documentation>Identifies the datatype from which the current type is derived.</xs:documentation>
              <xs:documentation>UML: supplier of Derivation dependency stereotype</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="DatatypeParameter">
    <xs:annotation>
      <xs:documentation>UML: Corresponds to 'Parameter' for an operation that takes a datatype as its argument.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ModelElement">
        <xs:sequence>
          <xs:element name="type" type="DatatypeRef">
            <xs:annotation>
              <xs:documentation>Identifies the datatype of the property</xs:documentation>
              <xs:documentation>UML: Parameter.type association</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="defaultValue" type="DatatypeRef" minOccurs="0">
            <xs:annotation>
              <xs:documentation>Identifies the default value for the parameter if it is not explicitly bound.</xs:documentation>
              <xs:documentation>UML: defaultValue tag on Feature stereotype</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="name" type="FormalProperName" use="optional">
          <xs:annotation>
            <xs:documentation>The name of the parmater as referenced by code or by formal constraints.</xs:documentation>
            <xs:documentation>UML: from Parameter, inherited from modelElement</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attributeGroup ref="SortKeyRequired"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="OperationParameter">
    <xs:annotation>
      <xs:documentation>UML: Corresponds to 'Parameter' for an operation that takes a datatype as its argument.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ModelElement">
        <xs:sequence>
          <xs:element name="type" type="DatatypeRef">
            <xs:annotation>
              <xs:documentation>Identifies the datatype of the property</xs:documentation>
              <xs:documentation>UML: Parameter.type association</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="name" type="FormalPropertyName" use="optional">
          <xs:annotation>
            <xs:documentation>The name of the parmater as referenced by code or by formal constraints.</xs:documentation>
            <xs:documentation>UML: from Parameter, inherited from modelElement</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attributeGroup ref="SortKeyRequired"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="DatatypeOperation">
    <xs:annotation>
      <xs:documentation>Defines the content for a datatypeOperation</xs:documentation>
      <xs:documentation>UML: The basic part of the DatatypeOperation stereotype</xs:documentation>
      <xs:appinfo>
        <sch:pattern name="Validate DatatypeOperation type">
          <sch:rule abstract="true" id="DatatypeOperation">
            <sch:extends rule="Operation"/>
            <extends rule="CodeValidation"/>
            <sch:report test="@operationKind!='conversion' and count(preceding-sibling::mif:*[name(.)=name(current())][@name=current()/@name][count(mif:parameter[@name=current()/mif:parameter/@name])=count(mif:parameter)]">
							ERROR: There must not be more than one operation within a datatype definition having the same name and parameters.</sch:report>
            <sch:report test="@defaultFrom and count(mif:type/descendant-or-self::mif:*[contains('CD;CE;CS;SC;BL;ST;INT;REAL;MO;PQ', @name)])!=1">
							WARNING: DefaultFrom may only be specified for codes and simple datatypes (CD, CE, CS, SC, BL, ST, INT, REAL, MO, PQ).</sch:report>
            <sch:report test="count(mif:vocabularySpecification)=0 and count(mif:type/descendant-or-self::mif:*[contains('CD;CE;CS;SC', @name)])!=0">
							WARNING: Domain must be present for coded types (CD, CE, CS and SC).</sch:report>
            <sch:report test="count(mif:vocabularySpecification)!=0 and count(mif:type/descendant-or-self::mif:*[contains('CD;CE;CS;SC', @name)])=0">
							WARNING: Domain may only be present for coded types (CD, CE, CS and SC).</sch:report>-->
						<sch:report test="@default and count(mif:type/descendant-or-self::mif:*[contains('CD;CE;CS;SC;BL;ST;INT;REAL;MO;PQ', @name)])!=1">
							WARNING: Default may only be specified for codes and simple datatypes (CD, CE, CS, SC, BL, ST, INT, REAL, MO, PQ).</sch:report>
            <sch:report test="@minimumSupportedLength and count(mif:type/descendant-or-self::mif:*[contains('CD;CE;CS;SC;BL;ST;INT;REAL;MO;PQ', @name)])!=1">
							WARNING: Minimum supported length may only be specified for codes and simple datatypes (CD, CE, CS, SC, BL, ST, INT, REAL, MO, PQ).</sch:report>
            <sch:report test="count(mif:type/descendant-or-self::mif:*[@name='CS'])!=0 and mif:vocabularySpecification/@codingStrength='CWE'">
							ERROR: CodingStrength must not be CWE for CS datatype attributes.</sch:report>
            <sch:report test="count(mif:derivedFrom)=0 and count(mif:businessName)=0">
							ERROR: Non-derived operations must have a business name.</sch:report>
            <!-- Todo: How come? . . . -->
            <sch:report test="count(mif:derivedFrom)=0 and count(mif:annotations/mif:definition)=0">
							ERROR: Non-derived operations must have a definition annotation.</sch:report>
          </sch:rule>
        </sch:pattern>
      </xs:appinfo>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="Feature">
        <xs:sequence>
          <xs:group ref="BusinessName" minOccurs="0"/>
          <xs:element name="annotations" type="OperationAnnotations" minOccurs="0">
            <xs:annotation>
              <xs:documentation>Descriptive information about the containing element.</xs:documentation>
              <xs:documentation>UML: Inherited from modelElement</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="derivedFrom" type="OperationDerivation" minOccurs="0">
            <xs:annotation>
              <xs:documentation>Identifies the property and the datatype from which the current property is derived.</xs:documentation>
              <xs:documentation>UML: Property with a derivedFrom dependency</xs:documentation>
              <xs:appinfo>
                <sch:pattern name="Validate derivedFrom element">
                  <sch:rule context="mif:operation/mif:derivedFrom">
                    <sch:extends rule="OperationDerivation"/>
                  </sch:rule>
                </sch:pattern>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
          <xs:element name="parameter" type="OperationParameter" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>A parameter passed to the property used in determining the value for the property.</xs:documentation>
              <xs:documentation>UML: Parameter of 'input' type</xs:documentation>
            </xs:annotation>
            <!-- Todo: Consider having defaults for parameter  -->
          </xs:element>
          <xs:element name="type" type="DatatypeRef" minOccurs="0">
            <xs:annotation>
              <xs:documentation>Identifies the type of the data exposed by the property.</xs:documentation>
              <xs:documentation>UML: return type of 'typed' BehavioralFeature</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="vocabularySpecification" type="VocabularySpecification" minOccurs="0">
            <xs:annotation>
              <xs:documentation>References the HL7 vocabulary to define the set of allowed values that may be conveyed by this property.</xs:documentation>
              <xs:documentation>UML: Association to the conceptDomain - need to figure out what association</xs:documentation>
              <xs:appinfo>
                <sch:pattern name="Validate vocabularySpecification element">
                  <sch:rule context="mif:vocabularySpecification">
                    <sch:extends rule="DomainSpecificationWithStrength"/>
                  </sch:rule>
                </sch:pattern>
              </xs:appinfo>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attributeGroup ref="MultiplicityRangeOptional"/>
        <xs:attributeGroup ref="SortKeyOptional"/>
        <xs:attribute name="propertyKind" type="DatatypeOperationKind" use="optional">
          <xs:annotation>
            <xs:documentation>Identifies the variety of property being represented.  This attribute influences how the property is represented for display purposes in documentation.</xs:documentation>
            <xs:documentation>UML: Tagged value on datatypeProperty</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="name" type="FormalPropertyName" use="required">
          <xs:annotation>
            <xs:documentation>Name of the property</xs:documentation>
            <xs:documentation>UML: Name inherited from DataElement</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="visibility" type="VisibilityKind" use="optional">
          <xs:annotation>
            <xs:documentation>Identifies whether the operation may be invoked by specializations or outside of the type</xs:documentation>
            <xs:documentation>UML: visibility</xs:documentation>
          </xs:annotation>
          <!-- Todo: Mark this as 'required' for datatype definitions, but not flavors -->
        </xs:attribute>
        <xs:attribute name="ownerScope" type="OwnerScopeKind" default="instance">
          <xs:annotation>
            <xs:documentation>Indicates whether the the property exists at the datatype definition level or instance level.</xs:documentation>
            <xs:documentation>UML: ownerScope</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
      <!-- Todo: Enforce that sortKey, propertyKind, minimumMultiplicity and maximumMultiplicity are required for datatye definitions.  SortKey, propertyKind not allowed for anything other than datatype definitions -->
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="OperationDerivation">
    <xs:annotation>
      <xs:documentation>UML: A derivation dependency on another datatype operation</xs:documentation>
      <xs:appinfo>
        <sch:pattern name="Validate OperationDerivation type">
          <sch:rule abstract="true" id="OperationDerivation">
            <sch:report test="@operationName and count(mif:type)!=0">
							ERROR: A property reference may only have a name or a conversion datatype, not both.</sch:report>
            <sch:report test="not(@operationName) and count(mif:type)=0">
							ERROR: A property reference must have either a name or a conversion datatype.</sch:report>
          </sch:rule>
        </sch:pattern>
      </xs:appinfo>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="Derivation">
        <xs:sequence>
          <xs:element name="type" type="DatatypeRef" minOccurs="0">
            <xs:annotation>
              <xs:documentation>For 'conversion' properties, identifies the target datatype for the conversion.</xs:documentation>
              <xs:documentation>UML: result type of the operation.  Used for referencing non-named 'conversion' operations</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="targetDatatype" type="DatatypeRef">
            <xs:annotation>
              <xs:documentation>Identifies the datatype from which the property is derived.</xs:documentation>
              <xs:documentation>UML: client association on the derivedFrom dependency</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="DatatypeTemplateParameter">
    <xs:annotation>
      <xs:documentation>UML: TemplateParameter for a datatype</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DatatypeRef">
        <xs:attribute name="parameterName" type="FormalProperName" use="required">
          <xs:annotation>
            <xs:documentation>The name of the parameter for use in describing the datatype or in constructing formal constraints.</xs:documentation>
            <xs:documentation>UML: Name tag on TemplateParameter stereotype</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="OperationAnnotations">
    <xs:annotation>
      <xs:documentation>Comments relating to the operation</xs:documentation>
      <xs:documentation>UML: A collector for the comments and constraints associated with a Datatype operation.  (Consider rendering the definition or description annotation into ModelElement.documentation)</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="Annotations">
        <xs:sequence>
          <xs:element name="documentation" type="OperationDocumentation" minOccurs="0">
            <xs:annotation>
              <xs:documentation>Documentation related to the model element</xs:documentation>
              <xs:documentation>UML: Component of the Annotation object</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="appInfo" type="OperationAppInfo" minOccurs="0">
            <xs:annotation>
              <xs:documentation>Supporting programmatic information related to the model element which has descriptive componenents</xs:documentation>
              <xs:documentation>UML: Component of the Annotation object</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="OperationDocumentation">
    <xs:annotation>
      <xs:documentation>Simple comments relating to the operation</xs:documentation>
      <xs:documentation>UML: A collector for the comments and constraints associated with a Datatype operation.  (Consider rendering the definition or description annotation into ModelElement.documentation)</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="Documentation">
        <xs:sequence>
          <xs:group ref="Definition" minOccurs="0"/>
          <xs:group ref="UsageConstraint" minOccurs="0"/>
          <xs:group ref="UsageNotes" minOccurs="0"/>
          <xs:group ref="Rationale" minOccurs="0"/>
          <xs:group ref="Requirements" minOccurs="0"/>
          <xs:group ref="DesignComment" minOccurs="0"/>
          <xs:group ref="StabilityRemarks" minOccurs="0"/>
          <xs:group ref="OtherAnnotation" minOccurs="0"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="OperationAppInfo">
    <xs:annotation>
      <xs:documentation>Complex comments relating to the operation</xs:documentation>
      <xs:documentation>UML: A collector for 'complex' commments associated with a model element.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="AppInfo">
        <xs:sequence>
          <xs:group ref="Mapping" minOccurs="0"/>
          <xs:group ref="FormalConstraint" minOccurs="0"/>
          <xs:group ref="OpenIssue" minOccurs="0"/>
          <xs:group ref="StaticExample" minOccurs="0"/>
          <xs:group ref="BallotComment" minOccurs="0"/>
          <xs:group ref="ChangeRequest" minOccurs="0"/>
          <xs:group ref="DeprecationInfo" minOccurs="0"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>
</xs:schema>
